## o(n)


D = [(1,5,18,15),(1,3,20,16),(2,4,20,20),(1,3,19,19),(2,1,17,16),(5,5,20,15),(4,5,20,17),(2,4,18,16),(2,3,15,17),
               (2,5,18,20),(3,4,19,16),(3,3,20,17),(5,1,19,17),(4,3,18,18),(3,1,17,18),(5,2,19,20),(1,1,18,19),(2,3,19,18),
               (2,2,16,17),(3,2,19,18),(1,2,18,16),(1,4,18,20),(3,3,16,17),(5,1,19,18),(4,5,17,19),(1,4,18,20),(3,1,16,19),
               (2,4,16,17),(3,2,20,15),(5,4,19,18),(2,3,15,17),(1,4,19,20),(3,2,20,20),(4,4,20,20),(3,3,20,17),(2,4,15,16),
               (4,3,15,18),(5,4,17,18),(1,3,16,18),(3,5,15,19),(4,1,15,17),(2,4,17,19),(1,1,17,19),(1,5,17,17),(3,4,20,15),
               (2,1,16,15),(3,1,17,20),(3,5,20,20),(2,3,19,16),(3,4,16,15),(4,4,15,19),(1,2,20,18),(4,2,15,17),(1,5,20,15),
               (3,4,17,17),(2,1,20,16),(3,4,20,15),(3,3,16,19),(1,5,19,18),(3,1,17,19),(1,2,20,20),(3,5,15,16),(4,1,18,15),
               (4,2,17,20),(4,4,15,16),(5,1,16,15),(1,1,19,17),(5,5,16,17),(3,4,15,16),(4,3,15,16),(5,2,15,15),(2,3,20,18),
               (2,5,20,16),(2,5,20,18),(3,1,16,20),(1,2,20,17),(1,2,16,16),(1,2,20,18),(1,3,16,18),(3,4,18,16),(4,3,15,18),
               (3,3,16,17),(5,3,20,20),(2,3,16,16),(4,1,20,19),(3,1,17,18),(3,2,19,16),(2,5,20,16),(4,4,15,18),(4,4,18,16),
               (5,2,19,15),(2,4,16,16),(5,1,19,17),(4,1,15,16),(5,1,16,17),(4,1,16,19),(2,5,17,18),(4,2,20,19),(1,2,3,15),(1,3,16,15)]

def countArea(p):
    if(p == [0,0,0,0]):
        return 0
    x = p[2]-p[0]
    y = p[3]- p[1]
    return x * y

def countIntersect(p1,p2):
    p = [0,0,0,0]
    if(p1[3] < p2[1] or p1[1] > p2[3] or p1[2] < p2[0] or p1[0] > p2[2]):
        return [0,0,0,0]
    p[0] = max(p1[0], p2[0])
    p[1] = max(p1[1], p2[1])
    p[2] = min(p1[2], p2[2])
    p[3] = min(p1[3], p2[3])
    return p





def rect(D):
    ## który prostokąt wyjebać żeby przecięcie miało jak najw pole
    ## tworzę przeciecia prefiksowe od lewej i od prawej strony
    n = len(D)
    left = [[] for i in range(n)]
    right = [[] for i in range(n)]
    left[0] = D[0]
    right[n-1] = D[n-1]

    for i in range(1,n):
        left[i] = countIntersect(D[i], left[i-1])


    for i in range(n-2,-1, -1):
        right[i] = countIntersect(D[i], right[i+1])
    
    ## rozważąm przypadki krancowe wpierw
    ## i = 0
    best_area = -float("inf")
    best_idx = 0
    if(countArea(right[1]) > best_area):
        best_idx = 0
        best_area = countArea(right[1])

    ## i = n-1

    if(countArea(left[n-2]) > best_area):
        best_idx = n-1
        best_area = countArea(left[n-2])
        

    for i in range(1,n-1):
        inters = countIntersect(left[i-1], right[i+1])

        ar = countArea(inters)
        if(ar > best_area):
            best_idx = i
            best_area = ar
    return best_idx




print(rect(D))
